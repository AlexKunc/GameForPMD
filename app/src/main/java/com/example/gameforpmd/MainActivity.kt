package com.example.gameforpmd

import android.os.Bundle
import android.widget.*
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
data class Player(
    val name: String,
    val gender: String,
    val course: String,
    val level: Int,
    val birthDate: String,
    val zodiac: String
)

class MainActivity : AppCompatActivity() {

    private var birthDate: String = ""

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)

        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
        val editName = findViewById<EditText>(R.id.editTextName)
        val radioGroup = findViewById<RadioGroup>(R.id.radioGroupGender)
        val spinnerCourse = findViewById<Spinner>(R.id.spinnerCourse)
        val seekBar = findViewById<SeekBar>(R.id.seekBarLevel)
        val calendar = findViewById<CalendarView>(R.id.calendarView)
        val imageZodiac = findViewById<ImageView>(R.id.imageZodiac)
        val button = findViewById<Button>(R.id.buttonRegister)
        val textResult = findViewById<TextView>(R.id.textResult)

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è Edge-to-Edge
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º Spinner (–∫—É—Ä—Å)
        val courses = arrayOf("1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å", "3 –∫—É—Ä—Å", "4 –∫—É—Ä—Å")
        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, courses)
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        spinnerCourse.adapter = adapter

        // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        calendar.setOnDateChangeListener { _, year, month, day ->
            birthDate = "$day.${month + 1}.$year"
            // –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
            // textResult –º–æ–∂–Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
//            textResult.text = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: $birthDate"
        }

// –ö–Ω–æ–ø–∫–∞ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        button.setOnClickListener {
            val name = editName.text.toString()

            val genderId = radioGroup.checkedRadioButtonId
            val gender = if (genderId != -1) {
                findViewById<RadioButton>(genderId).text.toString()
            } else {
                "–ù–µ —É–∫–∞–∑–∞–Ω"
            }

            val course = spinnerCourse.selectedItem.toString()
            val level = seekBar.progress
            val zodiac = getZodiacFromDate(birthDate)

            val player = Player(name, gender, course, level, birthDate, zodiac)

            // üîπ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∑–¥–µ—Å—å
            updateZodiacImage(zodiac, imageZodiac)

            textResult.text = """
                –ò–≥—Ä–æ–∫: ${player.name}
                –ü–æ–ª: ${player.gender}
                –ö—É—Ä—Å: ${player.course}
                –£—Ä–æ–≤–µ–Ω—å: ${player.level}
                –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${player.birthDate}
                –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: ${player.zodiac}
            """.trimIndent()
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
    private fun getZodiac(day: Int, month: Int): String {
        return when (month) {
            1 -> if (day < 20) "–ö–æ–∑–µ—Ä–æ–≥" else "–í–æ–¥–æ–ª–µ–π"
            2 -> if (day < 19) "–í–æ–¥–æ–ª–µ–π" else "–†—ã–±—ã"
            3 -> if (day < 21) "–†—ã–±—ã" else "–û–≤–µ–Ω"
            4 -> if (day < 20) "–û–≤–µ–Ω" else "–¢–µ–ª–µ—Ü"
            5 -> if (day < 21) "–¢–µ–ª–µ—Ü" else "–ë–ª–∏–∑–Ω–µ—Ü—ã"
            6 -> if (day < 22) "–ë–ª–∏–∑–Ω–µ—Ü—ã" else "–†–∞–∫"
            7 -> if (day < 23) "–†–∞–∫" else "–õ–µ–≤"
            8 -> if (day < 23) "–õ–µ–≤" else "–î–µ–≤–∞"
            9 -> if (day < 23) "–î–µ–≤–∞" else "–í–µ—Å—ã"
            10 -> if (day < 23) "–í–µ—Å—ã" else "–°–∫–æ—Ä–ø–∏–æ–Ω"
            11 -> if (day < 23) "–°–∫–æ—Ä–ø–∏–æ–Ω" else "–°—Ç—Ä–µ–ª–µ—Ü"
            12 -> if (day < 22) "–°—Ç—Ä–µ–ª–µ—Ü" else "–ö–æ–∑–µ—Ä–æ–≥"
            else -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∞—Ç—ã (—Å—Ç—Ä–æ–∫–æ–π)
    private fun getZodiacFromDate(date: String): String {
        val parts = date.split(".")
        if (parts.size < 2) return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        val day = parts[0].toIntOrNull() ?: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        val month = parts[1].toIntOrNull() ?: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        return getZodiac(day, month)
    }

    // üëá –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏
    private fun updateZodiacImage(zodiac: String, imageView: ImageView) {
        when (zodiac) {
            "–û–≤–µ–Ω" -> imageView.setImageResource(R.drawable.aries)
            "–¢–µ–ª–µ—Ü" -> imageView.setImageResource(R.drawable.taurus)
            "–ë–ª–∏–∑–Ω–µ—Ü—ã" -> imageView.setImageResource(R.drawable.gemini)
            "–†–∞–∫" -> imageView.setImageResource(R.drawable.cancer)
            "–õ–µ–≤" -> imageView.setImageResource(R.drawable.leo)
            "–î–µ–≤–∞" -> imageView.setImageResource(R.drawable.virgo)
            "–í–µ—Å—ã" -> imageView.setImageResource(R.drawable.libra)
            "–°–∫–æ—Ä–ø–∏–æ–Ω" -> imageView.setImageResource(R.drawable.scorpio)
            "–°—Ç—Ä–µ–ª–µ—Ü" -> imageView.setImageResource(R.drawable.sagittarius)
            "–ö–æ–∑–µ—Ä–æ–≥" -> imageView.setImageResource(R.drawable.capricorn)
            "–í–æ–¥–æ–ª–µ–π" -> imageView.setImageResource(R.drawable.aquarius)
            "–†—ã–±—ã" -> imageView.setImageResource(R.drawable.pisces)
            else -> imageView.setImageResource(R.drawable.ic_launcher_foreground)
        }
    }
}
