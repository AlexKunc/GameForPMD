package com.example.gameforpmd

import android.content.Context
import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import androidx.viewpager2.widget.ViewPager2
import com.example.gameforpmd.ui.records.RecordsFragment
import com.google.android.material.tabs.TabLayout
import com.google.android.material.tabs.TabLayoutMediator
import kotlinx.coroutines.launch

class MainActivity : AppCompatActivity() {

    private lateinit var tabLayout: TabLayout
    private lateinit var viewPager: ViewPager2

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        tabLayout = findViewById(R.id.tabLayout)
        viewPager = findViewById(R.id.viewPager)

        val fragments = listOf(
            GameFragment(),
            RegisterFragment(),
            RulesFragment(),
            AuthorsFragment(),
            SettingsFragment(),
            RecordsFragment()
        )
        val titles = listOf("–ò–≥—Ä–∞", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ü—Ä–∞–≤–∏–ª–∞", "–ê–≤—Ç–æ—Ä—ã", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–†–µ–∫–æ—Ä–¥—ã")

        viewPager.adapter = ViewPagerAdapter(this, fragments)

        TabLayoutMediator(tabLayout, viewPager) { tab, position ->
            tab.text = titles[position]
        }.attach()

        // üëâ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        lifecycleScope.launch {
            val users = MyApp.db.userDao().getAll()
            if (users.isNotEmpty()) {
                val prefs = getSharedPreferences("user_prefs", Context.MODE_PRIVATE)
                val currentId = prefs.getInt("current_user_id", -1)
                if (currentId == -1) {
                    // –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ
                    saveCurrentUserId(users.first().id)
                    Log.d("MainActivity", "–í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${users.first().name}")
                } else {
                    // –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω, –ª–æ–≥–∏—Ä—É–µ–º
                    val selected = users.find { it.id == currentId }
                    Log.d("MainActivity", "–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${selected?.name ?: "–Ω–µ –Ω–∞–π–¥–µ–Ω"}")
                }
            } else {
                Log.d("MainActivity", "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            }
        }
    }

    private fun saveCurrentUserId(id: Int) {
        val prefs = getSharedPreferences("user_prefs", Context.MODE_PRIVATE)
        prefs.edit().putInt("current_user_id", id).apply()
    }
}
